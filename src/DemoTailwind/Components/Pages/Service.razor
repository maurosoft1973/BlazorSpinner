@page "/demo/service"
@rendermode @(new InteractiveServerRenderMode())
@inject SpinnerService spinnerservice

<PageTitle>Spinner - Service</PageTitle>

<h2>This example shows how to use the spinner with service.</h2>

<ol>
    <li>
        <p>In this case, the spinner is only displayed</p>
        <button type="button" @onclick="Click" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Show spinner</button>
    </li>
    <li>
        <hr />
    </li>
    <li>
        <p>In this case, the spinner is hidden after execution of the user-defined function</p>
        <button type="button" @onclick="ClickAsync" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Show spinner async</button>
    </li>
</ol>

<Spinner IsServiceSpinner="true" SpinnerMode="SpinnerMode.Page" SpinnerLoader="SpinnerLoader.Loader2" Visible="false" />

@code {
    void Click()
    {
        spinnerservice.Show();
    }

    void ClickAsync()
    {
        spinnerservice.Show(async (callBackFunctionClose) =>
        {
            await Task.Delay(2000); // Simulates a long activity
            await callBackFunctionClose(); // Invokes the asynchronous closing routine
        });
    }

}
